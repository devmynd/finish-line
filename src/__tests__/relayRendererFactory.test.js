/* eslint-env jest */
import React from 'react'
import { shallow } from 'enzyme'
import { uniqueId } from 'lodash'
import { commitMutation } from 'react-relay'
import { relayRendererFactory } from '../relayRendererFactory'

jest.mock('react-relay', () => {
  const commitMutation = jest.fn()
  return { commitMutation }
})

describe('initial state', () => {
  it('is the current environment', () => {
    const customEnvProvider = jest.fn(() => 'custom!')
    const otherEnvProvider = jest.fn(() => 'other!')
    const CustomRelayRenderer = relayRendererFactory(customEnvProvider)
    const OtherCustomRelayRenderer = relayRendererFactory(otherEnvProvider)
    const props = { query: 'query' }

    expect(customEnvProvider).toHaveBeenCalledTimes(1)
    expect(otherEnvProvider).toHaveBeenCalledTimes(1)

    const subject = shallow(<CustomRelayRenderer {...props} />)
    const other = shallow(<OtherCustomRelayRenderer {...props} />)
    expect(subject).toHaveState('environment', 'custom!')
    expect(other).toHaveState('environment', 'other!')
  })
})

describe('customRelayRendererId', () => {
  it('gives each rendered renderer a unique id', () => {
    const CustomRelayRenderer = relayRendererFactory(() => 1)
    const props = { query: 'query' }
    const subject = shallow(<CustomRelayRenderer {...props} />)
    const other = shallow(<CustomRelayRenderer {...props} />)
    expect(subject.instance().customRelayRendererId).toEqual(1)
    expect(other.instance().customRelayRendererId).toEqual(2)
  })

  it('does not affect other components generated by the factory', () => {
    const CustomRelayRenderer = relayRendererFactory(() => 1)
    const OtherCustomRelayRenderer = relayRendererFactory(() => 1)
    const props = { query: 'query' }
    const subject = shallow(<OtherCustomRelayRenderer {...props} />)
    expect(subject.instance().customRelayRendererId).toEqual(1)
    shallow(<CustomRelayRenderer {...props} />)
    shallow(<CustomRelayRenderer {...props} />)
    const other = shallow(<OtherCustomRelayRenderer {...props} />)
    expect(subject.instance().customRelayRendererId).toEqual(1)
    expect(other.instance().customRelayRendererId).toEqual(2)
  })
})

describe('#getChildContext', () => {
  let subject
  let result

  beforeEach(() => {
    const CustomRelayRenderer = relayRendererFactory(() => 1)
    subject = shallow(<CustomRelayRenderer query='query' />)
    result = subject.instance().getChildContext().relayEnvironment
  })

  it('has the current environment', () => {
    expect(result.current).toEqual(subject.state('environment'))
  })

  it('has the refresh relay environment function', () => {
    expect(result.refresh).toBeInstanceOf(Function)
    expect(result.refresh.name).toEqual('refreshRelayEnvironment')
  })

  it('has the commit mutation function', () => {
    expect(result.commitMutation).toBeInstanceOf(Function)
    expect(result.commitMutation.name).toEqual('wrappedCommitMutation')
  })
})

describe('#commitMutation', () => {
  it('commits the mutation with the current environment and passes arguments through', () => {
    let count = 1
    const counter = () => count++
    const arg = { some: 'thing' }
    const anotherArg = { some: 'other thing' }
    const CustomRelayRenderer = relayRendererFactory(counter)
    const subject = shallow(<CustomRelayRenderer query='query' />)

    subject.instance().getChildContext().relayEnvironment.commitMutation(arg)
    expect(commitMutation).toHaveBeenCalledWith(1, arg)

    subject.instance().getChildContext().relayEnvironment.refresh()
    subject.instance().getChildContext().relayEnvironment.commitMutation(anotherArg)
    expect(commitMutation).toHaveBeenCalledWith(2, anotherArg)
  })
})

describe('refreshing the relay environment and the component lifecycle', () => {
  let CustomRelayRenderer
  let subject
  let refreshRelayEnvironment
  let counter

  beforeEach(() => {
    let count = 1
    counter = () => count++
    CustomRelayRenderer = relayRendererFactory(counter)
    subject = shallow(<CustomRelayRenderer query='query' />)
    refreshRelayEnvironment = subject.instance().getChildContext().relayEnvironment.refresh
  })

  it('registers new components to receive new relay environments and unregisters them when unmounted', () => {
    const anotherSubject = shallow(<CustomRelayRenderer query='query' />)
    expect(subject).toHaveState('environment', 1)
    expect(anotherSubject).toHaveState('environment', 1)
    anotherSubject.unmount()
    refreshRelayEnvironment()
    expect(subject).toHaveState('environment', 2)
    const yetAnotherSubject = shallow(<CustomRelayRenderer query='query' />)
    expect(yetAnotherSubject).toHaveState('environment', 2)
  })

  it('does not affect other components generated by the factory', () => {
    const OtherCustomRelayRenderer = relayRendererFactory(counter)
    const other = shallow(<OtherCustomRelayRenderer query='query' />)
    expect(other).toHaveState('environment', 2)
    refreshRelayEnvironment()
    refreshRelayEnvironment()
    expect(subject).toHaveState('environment', 4)
    expect(other).toHaveState('environment', 2)
    refreshRelayEnvironment()
    expect(subject).toHaveState('environment', 5)
    expect(other).toHaveState('environment', 2)
  })
})

describe('#render', () => {
  it('renders a relay renderer and passes through all of its props', () => {
    const props = { some: 'props', for: 'testing', query: 'some query' }
    const CustomRelayRenderer = relayRendererFactory(uniqueId)
    const subject = shallow(<CustomRelayRenderer {...props} />)
    expect(subject.find('RelayRenderer').props()).toEqual(props)
  })
})
